plugins {
    id "scala"
    id "org.scoverage" version "8.0.3"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

scoverage {
    scoverageVersion='2.0.11'
    scoverageScalaVersion='2.13.12'
}

tasks.check.dependsOn reportScoverage
tasks.test.dependsOn processScoverageResources

sourceSets {
    main {
        scala {
            getOutput().dir(file("$buildDir/classes/scala/main"))
        }
        java {
            getDestinationDirectory().set(file("$buildDir/classes/java/main"))
        }
    }
}

// java code depends on scala code
tasks.compileScala.classpath = sourceSets.main.compileClasspath
tasks.compileJava.classpath += files(sourceSets.main.scala.classesDirectory)
tasks.compileScoverageJava.enabled(false)

sonarqube {
    properties {
        property 'sonar.sources', 'src/main/java,src/main/scala'
        property 'sonar.scala.coverage.reportPaths', "${buildDir}/reports/scoverage/scoverage.xml"
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // scala code is covered by scoverage
                "org/sonarsource/scala/converter/*"
            ])
        }))
    }
}

dependencies {
    compileOnly libs.sonar.plugin.api

    implementation libs.sonar.analyzer.commons
    implementation libs.slang.plugin
    implementation libs.slang.checks
    implementation libs.slang.api
    implementation libs.sonar.xml.parsing

    implementation (libs.scalameta) {
        exclude group: 'org.scalameta', module: 'semanticdb_2.13'
        exclude group: 'com.lihaoyi', module: 'fansi_2.13'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'org.jline', module: 'jline'
        // FIXME: next time we update scalameta, check if transitive dependencies are still vulnerable on mend
    }

    testImplementation testLibs.slang.antlr
    testImplementation testLibs.assertj.core
    testImplementation testLibs.mockito.core
    testImplementation testLibs.slang.testing
    testImplementation testLibs.junit.jupiter.api
    testImplementation testLibs.sonar.plugin.api.impl
    testImplementation testLibs.sonar.plugin.api.test.fixtures

    testRuntimeOnly testLibs.junit.jupiter.engine

    constraints {
        zinc('org.apache.logging.log4j:log4j-api:2.17.2') {
            because 'Address CVE-2021-44832 vulnerability'
        }
        zinc('org.apache.logging.log4j:log4j-core:2.17.2') {
            because 'Address CVE-2021-44832 vulnerability'
        }
        zinc('com.google.protobuf:protobuf-java:3.19.6') {
            because 'Address CVE-2022-3171 vulnerability'
        }
    }
}

jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.sonarsource.scala.plugin.ScalaPlugin',
                'Plugin-Description': 'Code Analyzer for Scala',
                'Plugin-Developers': 'SonarSource Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/scala.html',
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/SONARSCALA',
                'Plugin-Key': 'sonarscala',
                'Plugin-License': 'SONAR Source-Available License v1.0',
                'Plugin-Name': 'Scala Code Quality and Security',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/sonar-scala',
                'Plugin-Version': project.version,
                'Plugin-RequiredForLanguages': 'scala',
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'true',
                'Version': "${project.version}",
                'Jre-Min-Version': '11',
        )
    }
}

shadowJar {
    minimize { }
    // org.scalameta:common_2.13
    exclude 'org/scalameta/overload/*'
    // org.scalameta:io_2.13
    exclude 'scala/meta/internal/io/*'
    // org.scala-lang:scala-library
    exclude 'scala/annotation/*'
    exclude 'scala/collection/parallel/**'
    exclude 'scala/concurrent/**'
    exclude 'scala/io/*'
    exclude 'scala/util/matching/*'
    //
    exclude 'com/google/protobuf/**'
    // JNA, which is packaged with the scala parser
    exclude 'com/sun/jna/**'
    // scala-build related files, useless for our use
    exclude '**/*.js'
    exclude '**/*.properties'
    exclude '**/*.proto'
    exclude '**/*.txt'
    doLast {
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 14_000_000L, 16_000_000L)
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
